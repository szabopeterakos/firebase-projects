*,
*:before,
*:after {
  margin: 0;
  padding: 0;
}

$light: white;
$light_a: rgba(255, 255, 255, 0.28);
$dark: black;

body {
  background-color: $dark;
}

// based on : https://www.digitalocean.com/community/tutorials/css-pure-css-parallax

.wrapper {
  height: 100vh; // The height of the wrapper needs to be set to a fixed value for the effect to work.
  overflow-x: hidden;
  overflow-y: visible;
  // border: 2px green solid;
  perspective: 2px; // The perspective property simulates the distance from the viewport to the pseudo-elements you will create and transform further down in the CSS
}

.section {
  position: relative; // Set a position of relative so that the child, .parallax::after can be absolutely positioned relative to the parent element .section.
  height: 70vh;
  display: flex;
  align-items: center;
  justify-content: center;
  color: $light;
  text-shadow: 0 0 5px $dark;
  text-transform: lowercase;
}

.parallax::after {
  // The pseudo-element is the last child of the element with the class .parallax.
  content: "";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  // border: 1px solid red;
  transform: translateZ(-1px) scale(1.5); // moves the pseudo-element back away from the camera on the z-index, then scales it back up to fill the viewport.
  //   background-size: 100%;
  z-index: -1;
  // Because the pseudo-element is further away, it appears to move more slowly.
  // The speed of the effect can be altered by adjusting the values of translateZ, scale, and perspective while keeping them at the same proportions.
}

.static {
  background-color: $dark;
  background-image: linear-gradient(to right, rgb(27, 27, 27), rgb(4, 4, 4));
}

.bg1::after {
  background-image: url("./hls-resized-2.webp");
  background-size: cover;
  background-position: right;
  animation: zigzag 10s linear infinite;
  animation-direction: alternate;
}
@keyframes zigzag {
  from {
    transform: translateX(-10px) translateZ(-1px) scale(1.5) translateY(-30px);
  }
  to {
    transform: translateX(10px) translateZ(-1px) scale(1.5) translateY(-30px);
  }
}

.bg2::after {
  background-image: url("./Desktop_Docking_v2.webp");
  background-size: cover;
}

h1,
h3,
p {
  font-family: sans-serif;
}

h1 {
  font-size: 100px;
  line-height: 80px;
  margin-bottom: 20px;
  text-align: right;
}

p {
  display: inline-block;
  font-style: italic;
  opacity: 0.8;
  text-transform: none;
}

.element {
  text-align: right;
  margin: 0 20vw;
}

// text animation
.static {
  h1 {
    animation: visible 1s linear;
    animation-play-state: paused;
    animation-delay: calc((var(--scroll)) * -10s);
    transform: translateY(10px);
  }
  p {
    animation: visible 1s linear;
    animation-play-state: paused;
    animation-delay: calc((var(--scroll) * 2) * -1s);
    transform: translateY(10px);
  }
  @keyframes visible {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(10px);
    }
  }
}

.bg2 {
  h1 {
    animation: visible 1s linear;
    animation-play-state: paused;
    animation-delay: calc((var(--scroll)) * -1s);
    transform: translateY(10px);
  }
  p {
    animation: visible 1s linear;
    animation-play-state: paused;
    animation-delay: calc((var(--scroll) * -1s - 0.8s));
    transform: translateY(0px);
  }
  @keyframes visible {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(10px);
    }
  }

  &::after {
    animation: rotate 400s linear infinite;
  }

  @keyframes rotate {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
}

.bg1 {
  h1 {
    animation: visible_first 2s ease-in 1;
    animation-direction: alternate;
    transform: translateY(0px);
  }
  p {
    animation: visible_first 2s 1;
    animation-timing-function: ease-in;
    opacity: 1;
    transform: translateY(0px);
  }
  @keyframes visible_first {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }
    30% {
      opacity: 0;
    }
    100% {
      opacity: 0.8;
      transform: translateY(0px);
    }
  }
}
